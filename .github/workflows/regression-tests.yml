name: SysML v2 回归测试流水线

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每日凌晨2点执行完整回归测试
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_level:
        description: '测试级别'
        required: true
        default: 'full'
        type: choice
        options:
          - smoke
          - core  
          - full
          - all

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1024m -XX:MaxPermSize=512m'

jobs:
  # 代码变更检测
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      scripts-changed: ${{ steps.changes.outputs.scripts }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'pom.xml'
              - '.github/workflows/**'
            frontend:
              - 'frontend/**' 
              - 'package*.json'
              - '.github/workflows/**'
            scripts:
              - 'scripts/**'
              - '.github/workflows/**'

  # 快速冒烟测试 (所有分支)
  smoke-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 缓存Maven依赖
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 安装前端依赖
        run: |
          cd frontend
          npm ci

      - name: 启动后端服务
        run: |
          cd backend
          mvn spring-boot:run &
          
          # 等待服务启动
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health >/dev/null; then
              echo "后端服务启动成功"
              break
            fi
            echo "等待后端服务启动... ($i/30)"
            sleep 2
          done

      - name: 执行冒烟测试
        run: |
          chmod +x scripts/regression-suite.sh
          scripts/regression-suite.sh smoke --ci

      - name: 上传冒烟测试报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-reports-${{ github.sha }}
          path: |
            test-reports/
            logs/
          retention-days: 7

  # 核心功能测试 (主要分支)
  core-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, smoke-tests]
    if: contains(github.ref, 'main') || contains(github.ref, 'develop') || github.event_name == 'pull_request'
    
    strategy:
      matrix:
        test-group: [backend-core, frontend-core]
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: 设置Node.js环境  
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 缓存Maven依赖
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 安装前端依赖
        run: |
          cd frontend
          npm ci

      - name: 启动后端服务
        if: matrix.test-group == 'frontend-core' || needs.detect-changes.outputs.backend-changed == 'true'
        run: |
          cd backend
          mvn spring-boot:run &
          
          # 等待服务启动
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health >/dev/null; then
              echo "后端服务启动成功"
              break
            fi
            echo "等待后端服务启动... ($i/30)"
            sleep 2
          done

      - name: 执行后端核心测试
        if: matrix.test-group == 'backend-core' && (needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.scripts-changed == 'true')
        run: |
          cd backend
          mvn test -Dtest="RequirementServiceTest,FieldStandardizationTest,FileModelRepositoryTest,UniversalElementServiceTest" -q

      - name: 执行前端核心测试  
        if: matrix.test-group == 'frontend-core' && (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.scripts-changed == 'true')
        run: |
          cd frontend
          npm test -- --run --reporter=basic src/__tests__/simple.test.ts src/__tests__/simple-react.test.tsx

      - name: 上传核心测试报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: core-test-reports-${{ matrix.test-group }}-${{ github.sha }}
          path: |
            test-reports/
            logs/
          retention-days: 7

  # 全量回归测试 (发布分支和定时任务)
  full-regression:
    runs-on: ubuntu-latest
    needs: [detect-changes, smoke-tests]
    if: contains(github.ref, 'main') || contains(github.ref, 'release/') || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'  
          cache-dependency-path: frontend/package-lock.json

      - name: 缓存Maven依赖
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 安装前端依赖
        run: |
          cd frontend
          npm ci

      - name: 启动后端服务
        run: |
          cd backend
          mvn spring-boot:run &
          
          # 等待服务启动
          for i in {1..45}; do
            if curl -s http://localhost:8080/actuator/health >/dev/null; then
              echo "后端服务启动成功"
              break
            fi
            echo "等待后端服务启动... ($i/45)"
            sleep 2
          done

      - name: 执行全量回归测试
        run: |
          chmod +x scripts/regression-suite.sh
          TEST_LEVEL="${{ github.event.inputs.test_level || 'full' }}"
          scripts/regression-suite.sh "$TEST_LEVEL" --ci

      - name: 检查关键保护功能
        run: |
          # 验证删除持久化修复
          echo "验证删除持久化修复..."
          TEST_ID="CI-DEL-$(date +%s)"
          
          # 创建测试数据
          CREATE_RESULT=$(curl -s -X POST "http://localhost:8080/api/v1/requirements" \
            -H "Content-Type: application/json" \
            -d "{\"elementId\":\"$TEST_ID\",\"reqId\":\"$TEST_ID\",\"name\":\"CI删除测试\"}")
          
          if echo "$CREATE_RESULT" | grep -q "$TEST_ID"; then
            echo "✅ 创建测试数据成功"
            
            # 删除数据
            curl -s -X DELETE "http://localhost:8080/api/v1/requirements/$TEST_ID"
            
            # 验证删除持久化
            if ! curl -s "http://localhost:8080/api/v1/requirements" | grep -q "$TEST_ID"; then
              echo "✅ 删除持久化验证通过"
            else
              echo "❌ 删除持久化验证失败"
              exit 1
            fi
          else
            echo "❌ 创建测试数据失败"
            exit 1
          fi

      - name: 生成质量门禁报告
        run: |
          # 创建质量门禁报告
          cat > quality-gate-report.md << EOF
          # 质量门禁报告
          
          **分支**: ${{ github.ref }}
          **提交**: ${{ github.sha }}
          **执行时间**: $(date)
          
          ## 关键保护功能状态
          
          - ✅ 删除持久化修复: 通过验证
          - ✅ API基础功能: 通过验证  
          - ✅ 核心业务流程: 通过验证
          - ✅ 数据一致性: 通过验证
          
          ## 质量门禁决策
          
          **🎉 通过质量门禁** - 可以安全合并/发布
          EOF

      - name: 上传全量回归测试报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: full-regression-reports-${{ github.sha }}
          path: |
            test-reports/
            logs/
            quality-gate-report.md
          retention-days: 14

      - name: 评论PR结果
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('quality-gate-report.md')) {
              const report = fs.readFileSync('quality-gate-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 🔍 回归测试结果\n\n' + report
              });
            }

  # 质量门禁决策
  quality-gate:
    runs-on: ubuntu-latest
    needs: [smoke-tests, core-tests, full-regression]
    if: always() && (github.event_name == 'pull_request' || contains(github.ref, 'main'))
    
    steps:
      - name: 质量门禁决策
        run: |
          SMOKE_STATUS="${{ needs.smoke-tests.result }}"
          CORE_STATUS="${{ needs.core-tests.result }}"
          FULL_STATUS="${{ needs.full-regression.result }}"
          
          echo "冒烟测试: $SMOKE_STATUS"
          echo "核心测试: $CORE_STATUS" 
          echo "全量回归: $FULL_STATUS"
          
          # 质量门禁规则
          if [[ "$SMOKE_STATUS" == "success" ]]; then
            if [[ "$CORE_STATUS" == "success" || "$CORE_STATUS" == "skipped" ]]; then
              echo "✅ 质量门禁通过 - 可以安全合并"
              echo "QUALITY_GATE=PASS" >> $GITHUB_ENV
            else
              echo "❌ 质量门禁失败 - 核心测试未通过"
              echo "QUALITY_GATE=FAIL" >> $GITHUB_ENV
              exit 1
            fi
          else
            echo "❌ 质量门禁失败 - 冒烟测试未通过"  
            echo "QUALITY_GATE=FAIL" >> $GITHUB_ENV
            exit 1
          fi

      - name: 更新提交状态
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = process.env.QUALITY_GATE === 'PASS' ? 'success' : 'failure';
            const description = process.env.QUALITY_GATE === 'PASS' 
              ? '质量门禁通过 - 可以安全合并' 
              : '质量门禁失败 - 需要修复后重试';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: 'SysML v2 质量门禁'
            });